/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: rpc.proto */

#ifndef PROTOBUF_C_rpc_2eproto__INCLUDED
#define PROTOBUF_C_rpc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Call Call;
typedef struct _Return Return;
typedef struct _InvertArguments InvertArguments;
typedef struct _InvertReturnValue InvertReturnValue;


/* --- enums --- */


/* --- messages --- */

struct  _Call
{
  ProtobufCMessage base;
  char *name;
  ProtobufCBinaryData args;
};
#define CALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call__descriptor) \
    , NULL, {0,NULL} }


struct  _Return
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
  ProtobufCBinaryData value;
};
#define RETURN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&return__descriptor) \
    , 0, {0,NULL} }


struct  _InvertArguments
{
  ProtobufCMessage base;
  protobuf_c_boolean v;
};
#define INVERT_ARGUMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invert_arguments__descriptor) \
    , 0 }


struct  _InvertReturnValue
{
  ProtobufCMessage base;
  protobuf_c_boolean notv;
};
#define INVERT_RETURN_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&invert_return_value__descriptor) \
    , 0 }


/* Call methods */
void   call__init
                     (Call         *message);
size_t call__get_packed_size
                     (const Call   *message);
size_t call__pack
                     (const Call   *message,
                      uint8_t             *out);
size_t call__pack_to_buffer
                     (const Call   *message,
                      ProtobufCBuffer     *buffer);
Call *
       call__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   call__free_unpacked
                     (Call *message,
                      ProtobufCAllocator *allocator);
/* Return methods */
void   return__init
                     (Return         *message);
size_t return__get_packed_size
                     (const Return   *message);
size_t return__pack
                     (const Return   *message,
                      uint8_t             *out);
size_t return__pack_to_buffer
                     (const Return   *message,
                      ProtobufCBuffer     *buffer);
Return *
       return__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   return__free_unpacked
                     (Return *message,
                      ProtobufCAllocator *allocator);
/* InvertArguments methods */
void   invert_arguments__init
                     (InvertArguments         *message);
size_t invert_arguments__get_packed_size
                     (const InvertArguments   *message);
size_t invert_arguments__pack
                     (const InvertArguments   *message,
                      uint8_t             *out);
size_t invert_arguments__pack_to_buffer
                     (const InvertArguments   *message,
                      ProtobufCBuffer     *buffer);
InvertArguments *
       invert_arguments__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invert_arguments__free_unpacked
                     (InvertArguments *message,
                      ProtobufCAllocator *allocator);
/* InvertReturnValue methods */
void   invert_return_value__init
                     (InvertReturnValue         *message);
size_t invert_return_value__get_packed_size
                     (const InvertReturnValue   *message);
size_t invert_return_value__pack
                     (const InvertReturnValue   *message,
                      uint8_t             *out);
size_t invert_return_value__pack_to_buffer
                     (const InvertReturnValue   *message,
                      ProtobufCBuffer     *buffer);
InvertReturnValue *
       invert_return_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   invert_return_value__free_unpacked
                     (InvertReturnValue *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Call_Closure)
                 (const Call *message,
                  void *closure_data);
typedef void (*Return_Closure)
                 (const Return *message,
                  void *closure_data);
typedef void (*InvertArguments_Closure)
                 (const InvertArguments *message,
                  void *closure_data);
typedef void (*InvertReturnValue_Closure)
                 (const InvertReturnValue *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor call__descriptor;
extern const ProtobufCMessageDescriptor return__descriptor;
extern const ProtobufCMessageDescriptor invert_arguments__descriptor;
extern const ProtobufCMessageDescriptor invert_return_value__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_rpc_2eproto__INCLUDED */
